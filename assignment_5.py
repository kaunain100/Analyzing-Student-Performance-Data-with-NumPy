# -*- coding: utf-8 -*-
"""Assignment 5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mhuWfmHhAXMRZ_3JTg7wIKSx92u_mdTx
"""

import numpy as np

"""# 1Ô∏è‚É£Step 1: Load and Explore the Dataset"""

# Student Names
students = np.array(["Tahura", "Iqra", "Zarmeen", "Amber", "Amreen", "kaunain"])
# Scores: [Math, Science, English]
scores = np.array([
    [78, 90, 92],
    [93, np.nan, 83],
    [68, 95, 79],
    [np.nan, 70, 82],
    [89, 96, 91],
    [87, 97, 98]
])

# Attendance Percentage
attendance = np.array([65, 85, 95, np.nan, 98, 35]).reshape(-1, 1)

# Shape
print("Shape")
print(f"students Array shape: {students.shape}")
print(f"scores Array shape: {scores.shape}")
print(f"attendance Array shape: {attendance.shape}\n")

#Size
print("Size")
print(f"students Array size: {students.size}")
print(f"scores Array size: {scores.size}")
print(f"attendance Array size: {attendance.size}\n")

#Data Type
print("Data Type")
print(f"students Array data type: {students.dtype}")
print(f"scores Array data type: {scores.dtype}")
print(f"attendance Array data type: {attendance.dtype}")

"""# 2Ô∏è‚É£Step 2: Data Cleaning & Handling Missing Values

"""

# Identifying the missing values
print(np.isnan(scores))

# Putting average score in missing values
score_mean = np.nanmean(scores, axis=0)
scores[np.isnan(scores)] = np.take(score_mean, np.isnan(scores).nonzero()[1])

# Putting the mean attendance in the missing values

attendance_mean = np.nanmean(attendance)
attendance[np.isnan(attendance)] = attendance_mean

"""# 3Ô∏è‚É£Step 3: Perform Mathematical Analysis"""

# 1Ô∏è‚É£ Calculate mean, median, standard deviation, and max for each subject
mean_scores = np.nanmean(scores, axis=0)  # Ignoring NaNs
median_scores = np.nanmedian(scores, axis=0)
std_scores = np.nanstd(scores, axis=0)
max_scores = np.nanmax(scores, axis=0)

# 2Ô∏è‚É£ Calculate overall average score for each student
average_scores = np.nanmean(scores, axis=1)

# 3Ô∏è‚É£ Identify the top performer
total_scores = np.nansum(scores, axis=1)  # Total scores ignoring NaNs
top_performer_index = np.argmax(total_scores)  # Index of the highest scorer
top_performer = students[top_performer_index]

# Display results
print("üìå Subject-wise Analysis:")
print(f"Mean Scores (Math, Science, English): {mean_scores}")
print(f"Median Scores (Math, Science, English): {median_scores}")
print(f"Standard Deviation (Math, Science, English): {std_scores}")
print(f"Highest Scores (Math, Science, English): {max_scores}")

print("\nüìå Overall Average Score per Student:")
for i in range(len(students)):
    print(f"{students[i]}: {average_scores[i]:.2f}")

print(f"\nüèÜ Top Performer: {top_performer} with total score {total_scores[top_performer_index]}")

"""# 4Ô∏è‚É£Step 4: Reshaping & Broadcasting for Data Analysis"""

### 1Ô∏è‚É£ Normalize Scores using Min-Max Scaling ###
# Formula: (score - min) / (max - min)
min_scores = np.nanmin(scores, axis=0)
max_scores = np.nanmax(scores, axis=0)

normalized_scores = (scores - min_scores) / (max_scores - min_scores)

print("\n‚úÖ Normalized Scores (Min-Max Scaling):")
print(normalized_scores)

### 2Ô∏è‚É£ Reshape Scores into 3D Format ###
# Let's assume we want to simulate 2 sections with 5 students each and 3 subjects
reshaped_scores = scores.reshape(1, 6, 3)  # 1 section, 5 students, 3 subjects
print("\n‚úÖ Reshaped Scores (3D):")
print(reshaped_scores)

### 3Ô∏è‚É£ Apply a Bonus of 5 Marks to Students Scoring Below 80 in Any Subject ###
bonus_scores = np.where(scores < 80, scores + 5, scores)

print("\n‚úÖ Scores After Bonus (5 marks for <80):")
print(bonus_scores)

"""# 5Ô∏è‚É£Step 5: Stacking & Splitting for Better Data Handling"""

### 1Ô∏è‚É£ Horizontally Stack Scores & Attendance ###
stacked_data = np.hstack((scores, attendance))
print("\n‚úÖ Horizontally Stacked Data (Scores + Attendance):")
print(stacked_data)

### 2Ô∏è‚É£ Split Dataset into Two Equal Parts ###
split_data = np.split(stacked_data, 2)  # Splits into 2 parts

# Handling odd number of students (if necessary)
part1 = split_data[0]
part2 = split_data[1]

### 3Ô∏è‚É£ Compute and Compare Average Scores ###
# Calculate mean for each part, ignoring NaNs
mean_part1 = np.nanmean(part1[:, :-1])  # Exclude attendance column
mean_part2 = np.nanmean(part2[:, :-1])  # Exclude attendance column

print(f"\nüìä Average Score Comparison:")
print(f"Part 1 Average Score: {mean_part1:.2f}")
print(f"Part 2 Average Score: {mean_part2:.2f}")

# Compare performance
if mean_part1 > mean_part2:
    print("\nüèÜ Part 1 has a higher average score!")
elif mean_part1 < mean_part2:
    print("\nüèÜ Part 2 has a higher average score!")
else:
    print("\nü§ù Both parts have equal average scores!")

"""# 6Ô∏è‚É£Step 6: Filtering Data with Boolean Conditions"""

### 1Ô∏è‚É£ Extract Students with Attendance < 90% ###
low_attendance_indices = np.where(attendance.flatten() < 90)[0]  # Find indices where attendance < 90
low_attendance_students = students[low_attendance_indices]

print("\n‚úÖ Students with Attendance < 90%:")
print(low_attendance_students)

### 2Ô∏è‚É£ Find Students Who Scored Above 85 in All Subjects ###
high_score_indices = np.where(np.all(scores >= 85, axis=1))[0]  # Find indices where all scores ‚â• 85
high_score_students = students[high_score_indices]

print("\n‚úÖ Students Who Scored Above 85 in All Subjects:")
print(high_score_students)

### 3Ô∏è‚É£ Identify Students Who Failed (Scored Below 40 in Any Subject) ###
failed_indices = np.where(np.any(scores < 40, axis=1))[0]  # Find indices where any score < 40
failed_students = students[failed_indices]

print("\n‚úÖ Students Who Failed (Score < 40 in Any Subject):")
print(failed_students if len(failed_students) > 0 else "No students failed!")